#BlueJ class context
comment0.target=OrderList
comment0.text=\n\ This\ class\ creates\ an\ arraylist\ which\ has\ elements\ added\ to\ it\ in\ an\ ordered\n\ way\ and\ uses\ binarysearch\ to\ find\ values\ in\ the\ list.\ The\ arraylist\ is\ a\ generic\n\ type\ and\ has\ modifier\ and\ accessor\ methods\ for\ the\ arraylist.\n\n\ @author\ Sophie\ Sjogren,\ worked\ with\ Tabitha\n\ @version\ 5-7-21\n
comment1.params=
comment1.target=OrderList()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ OrderList\n
comment10.params=
comment10.target=int\ size()
comment10.text=\n\ This\ method\ gets\ and\ returns\ the\ size\ of\ the\ list.\n\n\ @return\ \ \ \ the\ size\ of\ the\ list\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ This\ method\ gets\ each\ element\ in\ the\ arraylist\ and\ prints\ it\ as\ a\ string\n\n\ @return\ \ \ \ the\ string\ containing\ the\ current\ state\ of\ the\ list\n
comment2.params=val
comment2.target=int\ binarySearch(java.lang.Comparable)
comment2.text=\n\ This\ method\ uses\ a\ binary\ search\ method\ to\ find\ the\ specified\ value\ and\n\ returns\ -1\ if\ it\ is\ not\ found.\n\n\ @param\ \ val\ \ the\ element\ being\ added\ to\ the\ list\n\ @return\ \ \ \ the\ position\ of\ the\ value,\ or\ -1\ if\ not\ found\n
comment3.params=element
comment3.target=void\ add(java.lang.Comparable)
comment3.text=\n\ This\ method\ adds\ a\ given\ element\ to\ its\ corresponding\ position\ in\ the\n\ list\ which\ will\ put\ the\ arraylist\ in\ order.\n\n\ @param\ \ element\ \ the\ element\ being\ added\ to\ the\ list\n
comment4.params=index
comment4.target=java.lang.Comparable\ get(int)
comment4.text=\n\ This\ method\ gets\ an\ element\ at\ a\ specified\ index\ and\ throws\ an\ exception\ \n\ if\ the\ list\ is\ empty.\n\n\ @param\ \ index\ \ the\ position\ of\ the\ element\ being\ found\n\ @return\ \ \ \ the\ element\ at\ the\ index\n
comment5.params=index
comment5.target=java.lang.Comparable\ remove(int)
comment5.text=\n\ This\ method\ removes\ an\ element\ from\ a\ specified\ index\ and\ returns\ the\ \n\ value\ of\ that\ element.\n\n\ @param\ \ index\ \ the\ index\ that\ the\ element\ will\ be\ removed\ at\n\ @return\ \ \ \ the\ removed\ element\ at\ the\ index\ \n
comment6.params=element
comment6.target=boolean\ removeIfExists(java.lang.Comparable)
comment6.text=\n\ This\ method\ checks\ to\ make\ sure\ the\ given\ element\ is\ in\ the\ list\ and\ then\ returns\ \n\ false\ if\ it\ is\ not\ and\ returns\ true\ and\ removes\ the\ element\ if\ it\ is\ in\ the\ \n\ list.\n\n\ @param\ \ element\ \ the\ val\ to\ be\ removed\ in\ the\ list\n\ @return\ \ \ \ true\ if\ the\ element\ is\ in\ the\ list\ and\ false\ if\ not\n
comment7.params=element
comment7.target=boolean\ contains(java.lang.Comparable)
comment7.text=\n\ This\ method\ calls\ on\ the\ binary\ search\ to\ check\ if\ the\ list\ contains\ the\n\ element\ and\ returns\ a\ boolean\ according\ to\ the\ result.\n\n\ @param\ \ element\ \ the\ value\ to\ search\ for\ in\ the\ list\n\ @return\ \ \ \ true\ if\ element\ is\ in\ list\ and\ false\ if\ not\n
comment8.params=element
comment8.target=int\ find(java.lang.Comparable)
comment8.text=\n\ This\ method\ uses\ binary\ search\ to\ check\ if\ the\ element\ is\ in\ the\ list\ then\ \n\ returns\ the\ index\ of\ that\ element\ or\ -1\ if\ it\ is\ not\ in\ the\ list.\n\n\ @param\ \ element\ \ the\ element\ that\ will\ be\ searched\ for\ in\ the\ list\n\ @return\ \ \ \ the\ index\ of\ the\ element\ or\ -1\ if\ not\ in\ list\n
comment9.params=
comment9.target=boolean\ isEmpty()
comment9.text=\n\ This\ method\ checks\ the\ size\ of\ the\ list\ and\ returns\ true\ if\ the\ list\ is\n\ empty\ and\ returns\ false\ if\ it\ is\ not.\n\n\ @return\ \ \ \ true\ if\ the\ list\ is\ empty\ and\ false\ if\ not\n
numComments=12
