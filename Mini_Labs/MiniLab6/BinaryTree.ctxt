#BlueJ class context
comment0.target=BinaryTree
comment0.text=\n\ This\ class\ contains\ the\ majority\ of\ modifier\ and\ accessor\ methods\ used\ for\ the\ \n\ program.\ The\ data\ from\ the\ binary\ tree\ is\ contained\ in\ this\ class\ and\ the\ traversal\n\ methods\ allow\ the\ data\ to\ be\ moved\ around\ and\ analyzed\ to\ find\ information\ about\n\ the\ binary\ tree.\n\n\ @author\ Sophie\ Sjogren\n\ @version\ 5\ June\ 2021\n
comment1.params=
comment1.target=BinaryTree()
comment1.text=\ Creates\ an\ empty\ binary\ tree\ with\ no\ data\ and\ no\ children.\ \n\ \ \n
comment10.params=node
comment10.target=void\ inOrderTraversal(BinaryTree)
comment10.text=\ Traverses\ the\ tree\ in\ in-order.\n\ \ \ \ \ \ @param\ node\ from\ the\ binary\ tree\n
comment11.params=
comment11.target=boolean\ isLeaf()
comment11.text=\ This\ method\ checks\ the\ nodes\ to\ the\ right\ and\ left\ to\ see\ if\ the\ current\ node\ is\ a\ leaf\n\ \ \ \ \ \ @return\ true\ if\ the\ node\ is\ a\ leaf\ and\ false\ if\ not\n
comment12.params=
comment12.target=int\ numNodes()
comment12.text=\ This\ method\ finds\ the\ number\ of\ nodes\ in\ the\ tree\n\ \ \ \ \ \ @return\ the\ int\ value\ containing\ the\ number\ of\ nodes\ the\ tree\ has\n
comment13.params=
comment13.target=int\ numLeaves()
comment13.text=\ This\ method\ finds\ the\ number\ of\ leaves\ in\ the\ tree\n\ \ \ \ \ \ @return\ the\ int\ value\ containing\ the\ number\ of\ leaves\ the\ tree\ has\n
comment14.params=
comment14.target=int\ depth()
comment14.text=\ This\ method\ finds\ the\ depth\ of\ the\ tree\ by\ counting\ the\ height.\n\ \ \ \ \ \ @return\ the\ int\ containing\ the\ height\ of\ the\ tree\n
comment15.params=item
comment15.target=boolean\ contains(java.lang.Object)
comment15.text=\ This\ method\ tests\ to\ see\ if\ a\ given\ item\ is\ in\ the\ tree\n\ \ \ \ \ \ @param\ an\ item\ that\ will\ be\ looked\ for\ in\ the\ tree\n\ \ \ \ \ \ @return\ true\ if\ the\ item\ is\ found\ and\ false\ if\ the\ item\ is\ not\ in\ the\ tree\n
comment16.params=item
comment16.target=int\ numOccurrences(java.lang.Object)
comment16.text=\ This\ method\ tracks\ the\ number\ of\ times\ an\ item\ occurs\ in\ the\ list.\ \n\ \ \ \ \ \ @param\ the\ item\ that\ will\ be\ looked\ for\ in\ the\ list\n\ \ \ \ \ \ @return\ the\ int\ containing\ the\ number\ of\ times\ the\ item\ is\ in\ the\ list\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\ Tests\ whether\ this\ is\ an\ empty\ tree.\n\ \ \ \ \ \ @return\ true\ if\ the\ tree\ is\ empty;\ false\ otherwise\n
comment3.params=
comment3.target=java.lang.Object\ getElement()
comment3.text=\ Gets\ the\ data\ associated\ with\ the\ root\ node\ of\ this\ particular\ tree\n\ (recall\ recursive\ definition\ of\ trees).\n\ \ \ \ \ \ @return\ value\ associated\ with\ tree's\ root\ node;\ \n\ \ \ \ \ \ null\ if\ tree\ is\ empty\n
comment4.params=
comment4.target=BinaryTree\ leftTree()
comment4.text=\ Gets\ the\ left\ child\ of\ the\ current\ tree.\n\ \ \ \ \ \ @return\ the\ left\ child\ (a\ tree)\n
comment5.params=
comment5.target=BinaryTree\ rightTree()
comment5.text=\ Gets\ the\ right\ child\ of\ the\ current\ tree.\n\ \ \ \ \ \ @return\ the\ right\ child\ (a\ tree)\n
comment6.params=value
comment6.target=boolean\ add(java.lang.Object)
comment6.text=\ Adds\ elements\ to\ a\ binary\ tree.\ \ This\ implementation\ adds\ the\n\ \ elements\ in\ breadth-first\ (top-down,\ left-to-right)\ order.\n\ \ \ \ \ \ @param\ value\ the\ value\ to\ be\ added\ to\ the\ tree.\n\ \ \ \ \ \ @return\ true\ when\ the\ value\ has\ been\ added;\ should\ never\ return\ false\n
comment7.params=action
comment7.target=void\ breadthFirstTraversal(NodeVisitor)
comment7.text=\ Traverses\ the\ tree\ in\ breadth-first\ order.\n\ \ \ \ \ \ @param\ action\ an\ object\ that\ will\ act\ on\ all\ the\ nodes\ in\ the\ tree\n
comment8.params=node
comment8.target=void\ preOrderTraversal(BinaryTree)
comment8.text=\ Traverses\ the\ tree\ in\ pre-order.\n\ \ \ \ \ \ @param\ node\ from\ the\ binary\ tree\n
comment9.params=node
comment9.target=void\ postOrderTraversal(BinaryTree)
comment9.text=\ Traverses\ the\ tree\ in\ post-order.\n\ \ \ \ \ \ @param\ node\ from\ the\ binary\ \ tree\n
numComments=17
